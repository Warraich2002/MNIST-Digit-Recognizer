# -*- coding: utf-8 -*-
"""MNIST Digit Recogniser.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qba0M1tgsEf2VSjmxV-kP6mZPHwrBCys

# MNIST Digit Recognizer using PyTorch
# Author: Muhammad Babar Ayyaz
# Date: 17/10/25
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

train_data = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
test_data = datasets.MNIST(root='./data', train=False, download=True, transform=transform)

train_loader = DataLoader(train_data, batch_size=64, shuffle=True)
test_loader = DataLoader(test_data, batch_size=64, shuffle=False)

class DigitClassifier(nn.Module):
    def __init__(self):
        super().__init__()
        self.fc1 = nn.Linear(28*28, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 10)

    def forward(self, x):
        x = x.view(-1, 28*28)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

model = DigitClassifier()

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

epochs = 10
for epoch in range(epochs):
    total_loss = 0
    for images, labels in train_loader:
        optimizer.zero_grad()
        output = model(images)
        loss = criterion(output, labels)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    print(f"Epoch {epoch+1}/{epochs}, Loss: {total_loss/len(train_loader):.4f}")

correct = 0
total = 0
with torch.no_grad():
    for images, labels in test_loader:
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()
accuracy = 100 * correct / total
print(f"ðŸŽ¯ Test Accuracy: {accuracy:.2f}%")

import matplotlib.pyplot as plt
image, label = test_data[0]
plt.imshow(image.squeeze(), cmap="gray")
with torch.no_grad():
    pred = model(image.unsqueeze(0))
    predicted_label = torch.argmax(pred).item()
print(f"Actual: {label}, Predicted: {predicted_label}")

torch.save(model.state_dict(), "mnist_model.pth")
print("Model saved successfully!")

model.load_state_dict(torch.load("mnist_model.pth"))
model.eval()

